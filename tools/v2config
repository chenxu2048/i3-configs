#!/bin/bash

function cwd_guard() {
    local _SCRIPT_LOCATION="$0"
    local _ABSOLUTE_LOCATION=$(dirname "${_SCRIPT_LOCATION}")
    cd "${_ABSOLUTE_LOCATION}"
}
cwd_guard

V2CACHE="$HOME/.cache/v2ray"
V2CONFIG=../configs/v2ray
V2OUTBOUNDS="$V2CONFIG/outbounds"
V2PID="$V2CACHE/v2ray.pid"
mkdir -p "$V2CACHE"

function append_base64() {
    awk '{
        TAILS[0] = ""
        TAILS[1] = "="
        TAILS[2] = "=="
        REST = (length($0) * 3) % 4
        printf "%s%s", $0, TAILS[REST]
    }'
}

function decode_vmess() {
    local config=$(echo "$1" | sed 's#vmess://##' | base64 -d)
    local config_name=$(echo "${config}" | jq -r '.add')
    echo "${config}" | jq '
        {
            "alias": (if .ps then .ps else .add end),
            "protocol": "vmess",
            "settings": {
                "vnext": [
                    {
                        "address": .add,
                        "port": (.port | tonumber),
                        "users": [
                            {
                                "id": .id,
                                "alterId": .aid,
                                "email": "example@example.com",
                                "security": "auto"
                            }
                        ]
                    }
                ],
                "servers": null
            },
            "mux": {
                "enabled": true
            },
            "streamSettings": {
                "network": .net,
                "security": .tls,
                "wsSettings": {
                    "path": .path
                }
            }
        }
    ' > "${V2OUTBOUNDS}/${config_name}.json"
}

function decode_ss() {
    local config=$(
        echo "$1" | \
        sed 's/^ss:\/\/\([^#]*\)#\?.*$/\1/' | \
        append_base64 | \
        base64 -d
    )
    local alias_name=$(
        echo "$1" | \
        sed 's/^[^#]*#\?\(.*\)$/\1/'
    )
    local method=$(
        echo "${config}" | \
        sed 's/^\([a-z0-9\-]*\):.*/\1/g'
    )
    local password=$(
        echo "${config}" | \
        sed 's/^[a-z0-9\-]*:\(.*\)@.*/\1/g'
    )
    local address=$(
        echo "${config}" | \
        sed 's/^.*@\(.*\):.*/\1/g'
    )
    local port=$(
        echo "${config}" | \
        sed 's/^.*:\(.*\)/\1/g'
    )
    echo "{\"address\": \"${address}\", \"password\": \"${password}\", \"port\": ${port}, \"method\": \"${method}\", \"alias\": \"${alias_name}\"}" | jq \
        '{
            "alias": (if .alias then .alias else .address end),
            "protocol": "shadowsocks",
            "settings": {
                "servers": [
                    {
                        "address": .address,
                        "method": .method,
                        "ota": true,
                        "password": .password,
                        "port": .port
                    }
                ]
            }
        }
    ' > "${V2OUTBOUNDS}/${address}.json"
}

function fetch_subscribe() {
    local server
    curl -sL "$1" |  append_base64 | base64 -d -i | \
         while read -r server
            do
                decode_vmess "${server}"
            done
}

function read_last() {
    cat "$V2CACHE/last_server.txt"
}

function select_server() {
    ls -ut $V2OUTBOUNDS | \
        sed 's/\.json$//' | \
        rofi -p "v2ray configuration" -dmenu -no-custom
}

function start_v2ray() {
    local server="$1"
    if [ -z "$server" ]
    then
        exit
    fi
    if [ -f "$V2PID" ]
    then
        local pid=$(cat "$V2PID")
        local tried=5
        while [ "$(ps $pid | wc -l)" -eq 2 ]
        do
            if [ $tried -eq 0 ]
            then
                kill -KILL "$pid"
                break
            fi
            kill "$pid"
            tried=$(expr $tried - 1)
        done
    fi
    local outbounds="$V2OUTBOUNDS/$server.json"
    local config="$V2CACHE/$server.json"
    local template="$V2CONFIG/template.json"
    jq -s ".[0].outbounds += [.[1]] | .[0]" "${template}"  "${outbounds}" > "${config}"
    touch -a "${outbounds}"
    local server="$1"
    local config="$V2CACHE/$server.json"
    local stdout="$V2CACHE/v2ray.out"
    local stderr="$V2CACHE/v2ray.err"
    nohup v2ray -c "${config}" >"${stdout}" 2>"${stdout}" &disown
    echo $! > "$V2PID"
    echo "${server}" > "$V2CACHE/last_server.txt"
}

function do_subscribe() {
    case "$1" in
        http*)
            fetch_subscribe "$1"
            ;;
        vmess*)
            decode_vmess "$1"
            ;;
        ssr*)
            echo "invalid url"
            ;;
        ss*)
            decode_ss "$1"
            ;;
        *)
            echo "invalid url"
            return 1
            ;;
    esac
}

function update_subscribes() {
    cat $V2CONFIG/subscribe.txt | awk '{ print $0 }' | while read -r url
    do
        do_subscribe "$url"
    done
}

if [ $# -eq 0 ]
then
    start_v2ray "$(select_server)"
else
    case "$1" in
        start)
            start_v2ray "$(read_last)"
            ;;
        config)
            start_v2ray "$(select_server)"
            ;;
        update)
            update_subscribes
            ;;
        subscribe)
            do_subscribe "$2" && echo "$2" >> $V2CONFIG/subscribe.txt
            ;;
        *)
            echo "usage (start|config|update|subscribe)"
    esac
fi
